// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Episode {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  videoPath       String   
  rating      Float @default(0)
  number     Int @default(0)
  animeId     Int
  anime       Anime    @relation(fields: [animeId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

}

// model Tag {
//  id        Int      @id @default(autoincrement())
//  name      String
//  animes    Anime[]
//  createdAt DateTime @default(now())
//  updatedAt DateTime @default(now())
//}


model Anime {
  id          Int      @id @default(autoincrement())
  title       String
  description String @db.VarChar(2000)
  minAge     Int   @default(13)
  releaseDate DateTime?
  source     String @db.VarChar(100) @default("مانجا")
  image       String
  rating      Float  @default(0)
  studioId    Int @default(0)
  studio      Studio   @relation(fields: [studioId], references: [id])
  episodes    Episode[]
  reviews     Review[]
  usersFavorite Favorite[]
  Ended      Boolean @default(false)
  userListed UserAnimeList[]  

 // tags        Tag[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Studio {
  id        Int      @id @default(autoincrement())
  name      String
  animes    Anime[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      RoleType @default(USER)
  avatar    String    @db.VarChar(1000)
  favorites Favorite[]
  reviews Review[]
  animeList UserAnimeList[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

}

model Favorite{
  userId Int
  animeId Int
  user User @relation(fields: [userId], references: [id])
  anime Anime @relation(fields: [animeId], references: [id])
  @@id([userId, animeId])
}

model Review{
  id Int @id @default(autoincrement())
  userId Int
  animeId Int
  user User @relation(fields: [userId], references: [id])
  anime Anime @relation(fields: [animeId], references: [id])
  rating Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

}

enum RoleType {
   USER
   ADMIN
 }

 model UserAnimeList {
  userId Int
  animeId Int
  user User @relation(fields: [userId], references: [id])
  anime Anime @relation(fields: [animeId], references: [id])
  @@id([userId, animeId])
 }


// model AnimeTag {
//   animeId Int
//   tagId   Int
//   anime   Anime @relation(fields: [animeId], references: [id])
//   tag     Tag   @relation(fields: [tagId], references: [id])
// 
//   @@id([animeId, tagId])
// 
// }
